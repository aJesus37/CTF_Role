---
  - name: Start tmux in background with given name
    command: tmux new-session -d -s {{ session_name }}
    register: tmux_session
    changed_when: "tmux_session.rc != 0"
    tags: [tmux, always]

  - name: Rename first window to debug
    command: tmux rename-window -t 0 debug
    register: tmux_debug
    changed_when: "tmux_debug.rc != 0"
    tags: [tmux, always]

  - name: Enter project folder with debug window
    shell: |
      set -o pipefail
      tmux send-keys -t "debug" C-z "cd {{ project_path }} \
      && clear" Enter
    register: tmux_debug_folder
    changed_when: "tmux_debug_folder.rc != 0"

  - name: Create new window named recon/nmap
    command: tmux new-window -n recon/nmap
    register: tmux_recon_nmap
    changed_when: "tmux_recon_nmap.rc != 0"
    tags: [nmap]

  - name: Create nmap folder
    file:
      path: "{{ project_path +'/nmap' }}"
      state: directory

  - name: Enter project folder with nmap window
    shell: |
      set -o pipefail
      tmux send-keys -t "recon/nmap" C-z "cd {{ project_path }}/nmap \
      && clear" Enter
    register: tmux_nmap
    changed_when: "tmux_nmap.rc != 0"

  - name: Create new window named recon/web
    command: tmux new-window -n recon/web
    register: tmux_recon_web
    changed_when: "tmux_recon_web.rc != 0"
    tags: [web]

  - name: Create web folder
    file:
      path: "{{ project_path + '/web' }}"
      state: directory

  - name: Enter project folder with web window
    shell: |
      set -o pipefail
      tmux send-keys -t "recon/web" C-z "cd {{ project_path }}/web \
      && clear" Enter
    register: tmux_web
    changed_when: "tmux_web.rc != 0"

  - name: Create new window named recon/dns
    command: tmux new-window -n recon/dns
    register: tmux_recon_dns
    changed_when: "tmux_recon_dns.rc != 0"
    tags: [dns]

  - name: Create dns folder
    file:
      path: "{{ project_path + '/dns' }}"
      state: directory

  - name: Enter project folder with dns window
    shell: |
      set -o pipefail
      tmux send-keys -t "recon/dns" C-z "cd {{ project_path }}/dns \
      && clear" Enter
    register: tmux_dns
    changed_when: "tmux_snmp.rc != 0"

  - name: Create new window named enum/vuln
    command: tmux new-window -n enum/vuln
    tags: [vuln]
    when: vuln == "true"

  - name: Create vuln folder
    file:
      path: "{{ project_path + '/vuln' }}"
      state: directory
    when: vuln == "true"
    tags: [vuln]

  - name: Enter project folder with vuln window
    shell: |
      set -o pipefail
      tmux send-keys -t "enum/vuln" C-z "cd {{ project_path }}/vuln \
      && clear" Enter
    when: vuln == "true"
    tags: [vuln]

  - name: Create new window named enum/snmp
    command: tmux new-window -n enum/snmp
    register: tmux_snmp
    changed_when: "tmux_snmp.rc != 0"
    tags: [snmp]

  - name: Create snmp folder
    file:
      path: "{{ project_path + '/snmp' }}"
      state: directory
    tags: [snmp]

  - name: Enter project folder with snmp window
    shell: |
      set -o pipefail
      tmux send-keys -t "enum/snmp" C-z "cd {{ project_path }}/snmp \
      && clear" Enter
    register: tmux_snmp
    changed_when: "tmux_snmp.rc != 0"
    tags: [snmp]

  - name: Create new window named enum/web_vuln
    command: tmux new-window -n enum/web_vuln
    tags: [web_vuln]
    when: web_vuln == "true"

  - name: Create web_vuln folder
    file:
      path: "{{ project_path + '/web_vuln' }}"
      state: directory
    when: web_vuln == "true"
    tags: [web_vuln]

  - name: Enter project folder with vuln window
    shell: |
      set -o pipefail
      tmux send-keys -t "enum/web_vuln" C-z "cd {{ project_path }}/web_vuln \
      && clear" Enter
    when: web_vuln == "true"
    tags: [web_vuln]